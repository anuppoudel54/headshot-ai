
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."credits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "credits" integer DEFAULT 0 NOT NULL,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."credits" OWNER TO "postgres";

ALTER TABLE "public"."credits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."credits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."images" (
    "id" bigint NOT NULL,
    "modelId" bigint NOT NULL,
    "uri" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."images" OWNER TO "postgres";

ALTER TABLE "public"."images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."models" (
    "id" bigint NOT NULL,
    "name" "text",
    "type" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "status" "text" DEFAULT 'processing'::"text" NOT NULL,
    "modelId" "text"
);

ALTER TABLE "public"."models" OWNER TO "postgres";

ALTER TABLE "public"."models" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."models_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."samples" (
    "id" bigint NOT NULL,
    "uri" "text" NOT NULL,
    "modelId" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."samples" OWNER TO "postgres";

ALTER TABLE "public"."samples" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."samples_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."samples"
    ADD CONSTRAINT "samples_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_modelId_fkey" FOREIGN KEY ("modelId") REFERENCES "public"."models"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."samples"
    ADD CONSTRAINT "samples_modelId_fkey" FOREIGN KEY ("modelId") REFERENCES "public"."models"("id") ON DELETE CASCADE;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."credits" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."samples" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = ( SELECT "models"."user_id"
   FROM "public"."models"
  WHERE ("models"."id" = "samples"."modelId"))));

CREATE POLICY "Enable insert for service role" ON "public"."credits" FOR INSERT TO "service_role" WITH CHECK (true);

CREATE POLICY "Enable insert for service role" ON "public"."images" FOR INSERT TO "service_role" WITH CHECK (true);

CREATE POLICY "Enable insert for signed in users" ON "public"."models" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Enable read access for all authenticated users" ON "public"."images" FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( SELECT "models"."user_id"
   FROM "public"."models"
  WHERE ("models"."id" = "images"."modelId"))));

CREATE POLICY "Enable read access for authenticated users" ON "public"."credits" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable read access for authenticated users" ON "public"."models" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable read access for authenticated users" ON "public"."samples" FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( SELECT "models"."user_id"
   FROM "public"."models"
  WHERE ("models"."id" = "samples"."modelId"))));

CREATE POLICY "Enable read access for service role" ON "public"."credits" FOR SELECT TO "service_role" USING (true);

CREATE POLICY "Enable update for authenticated users" ON "public"."credits" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable update for service role" ON "public"."credits" FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update from service role" ON "public"."models" FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);

CREATE POLICY "Enable updates for authenticated users to samples" ON "public"."samples" FOR UPDATE TO "authenticated" WITH CHECK (("auth"."uid"() = ( SELECT "models"."user_id"
   FROM "public"."models"
  WHERE ("models"."id" = "samples"."modelId"))));

ALTER TABLE "public"."credits" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."models" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."samples" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."credits" TO "anon";
GRANT ALL ON TABLE "public"."credits" TO "authenticated";
GRANT ALL ON TABLE "public"."credits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."images" TO "anon";
GRANT ALL ON TABLE "public"."images" TO "authenticated";
GRANT ALL ON TABLE "public"."images" TO "service_role";

GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."models" TO "anon";
GRANT ALL ON TABLE "public"."models" TO "authenticated";
GRANT ALL ON TABLE "public"."models" TO "service_role";

GRANT ALL ON SEQUENCE "public"."models_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."models_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."models_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."samples" TO "anon";
GRANT ALL ON TABLE "public"."samples" TO "authenticated";
GRANT ALL ON TABLE "public"."samples" TO "service_role";

GRANT ALL ON SEQUENCE "public"."samples_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."samples_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."samples_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
